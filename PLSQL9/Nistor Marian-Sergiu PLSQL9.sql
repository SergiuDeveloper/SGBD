CREATE OR REPLACE PROCEDURE sp_Stergere_Catalog (
    nume_materie IN Cursuri.Titlu_Curs%TYPE
) AS
    nume_materie_intern Cursuri.Titlu_Curs%TYPE;
    ddl_command_cursor_id INTEGER;
    ddl_command_return_value INTEGER;
BEGIN
    nume_materie_intern := 't_' || REGEXP_REPLACE(nume_materie, '\W+', '_');

    ddl_command_cursor_id := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(
    ddl_command_cursor_id,
        '
            DROP TABLE ' || nume_materie_intern || '
        ',
        DBMS_SQL.NATIVE
    );
    ddl_command_return_value := DBMS_SQL.EXECUTE(ddl_command_cursor_id);
    DBMS_SQL.CLOSE_CURSOR(ddl_command_cursor_id);
END;
/
CREATE OR REPLACE PROCEDURE sp_Generare_Catalog (
    id_materie IN Cursuri.ID%TYPE
) AS
    nume_materie Cursuri.Titlu_Curs%TYPE;
    student Studenti%ROWTYPE;
    ddl_command_cursor_id INTEGER;
    ddl_command_return_value INTEGER;
    nume_type USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    nume_length USER_TAB_COLUMNS.DATA_LENGTH%TYPE;
    prenume_type USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    prenume_length USER_TAB_COLUMNS.DATA_LENGTH%TYPE;
    nr_matricol_type USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    nr_matricol_length USER_TAB_COLUMNS.DATA_LENGTH%TYPE;
    nota_type USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    nota_length USER_TAB_COLUMNS.DATA_LENGTH%TYPE;
    data_notare_type USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    data_notare_length USER_TAB_COLUMNS.DATA_LENGTH%TYPE;
BEGIN
    SELECT DATA_TYPE, DATA_LENGTH INTO nume_type, nume_length FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'STUDENTI' AND COLUMN_NAME = 'NUME';
    SELECT DATA_TYPE, DATA_LENGTH INTO prenume_type, prenume_length FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'STUDENTI' AND COLUMN_NAME = 'PRENUME';
    SELECT DATA_TYPE, DATA_LENGTH INTO nr_matricol_type, nr_matricol_length FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'STUDENTI' AND COLUMN_NAME = 'NR_MATRICOL';
    SELECT DATA_TYPE, DATA_LENGTH INTO nota_type, nota_length FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'NOTE' AND COLUMN_NAME = 'VALOARE';
    SELECT DATA_TYPE, DATA_LENGTH INTO data_notare_type, data_notare_length FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'NOTE' AND COLUMN_NAME = 'DATA_NOTARE';

    SELECT Titlu_Curs INTO nume_materie FROM Cursuri WHERE ID = id_materie;
    nume_materie := 't_' || REGEXP_REPLACE(nume_materie, '\W+', '_');

    BEGIN
        ddl_command_cursor_id := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(
            ddl_command_cursor_id,
            '
                DROP TABLE ' || nume_materie || '
            ',
            DBMS_SQL.NATIVE
        );
        ddl_command_return_value := DBMS_SQL.EXECUTE(ddl_command_cursor_id);
        DBMS_SQL.CLOSE_CURSOR(ddl_command_cursor_id);
        
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
    END;
    
    ddl_command_cursor_id := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(
        ddl_command_cursor_id,
        '
            CREATE TABLE ' || nume_materie || ' (
                ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                Nume ' || nume_type || '(' || nume_length || ') NOT NULL,
                Prenume ' || prenume_type || '(' || prenume_length || ') NOT NULL,
                Nr_Matricol ' || nr_matricol_type || '(' || nr_matricol_length || ') NOT NULL,
                Nota ' || nota_type || '(' || nota_length || ') NOT NULL,
                Data_Notare ' || data_notare_type || ' NOT NULL,
                
                CONSTRAINT u_Student_Unic_' || nume_materie || ' UNIQUE (
                    Nume,
                    Prenume,
                    Nr_Matricol
                )
                USING INDEX (
                    CREATE UNIQUE INDEX i_Student_Unic_' || nume_materie || ' ON ' || nume_materie || ' (
                        Nume,
                        Prenume,
                        Nr_Matricol
                    )
                )
            )
        ',
        DBMS_SQL.NATIVE
    );
    ddl_command_return_value := DBMS_SQL.EXECUTE(ddl_command_cursor_id);
    DBMS_SQL.CLOSE_CURSOR(ddl_command_cursor_id);
    
    FOR nota IN (SELECT ID_Student, Valoare, Data_Notare FROM Note WHERE ID_Curs = id_materie)
    LOOP
        SELECT * INTO student FROM Studenti WHERE ID = nota.ID_Student;
        
        ddl_command_cursor_id := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(
        ddl_command_cursor_id,
        '               
            INSERT INTO ' || nume_materie || ' (
                Nume,
                Prenume,
                Nr_Matricol,
                Nota,
                Data_Notare
            )
            VALUES (
                ' || chr(39) || student.Nume || chr(39) || ',
                ' || chr(39) || student.Prenume || chr(39) || ',
                ' || chr(39) || student.Nr_Matricol || chr(39) || ',
                ' || nota.Valoare || ',
                ' || chr(39) || nota.Data_Notare || chr(39) || '
            )
        ',
        DBMS_SQL.NATIVE
        );
        ddl_command_return_value := DBMS_SQL.EXECUTE(ddl_command_cursor_id);
        DBMS_SQL.CLOSE_CURSOR(ddl_command_cursor_id);
    END LOOP;
END;
/
BEGIN
    FOR curs IN (SELECT ID FROM Cursuri)
    LOOP
        sp_Generare_Catalog(curs.ID);
    END LOOP;
END;
/
CREATE OR REPLACE TRIGGER t_MaterieIntrodusa
AFTER INSERT ON Cursuri
FOR EACH ROW
BEGIN
    sp_Generare_Catalog(:NEW.ID);
END;
/
CREATE OR REPLACE TRIGGER t_MaterieModificata
AFTER UPDATE ON Cursuri
FOR EACH ROW
BEGIN
    sp_Stergere_Catalog(:OLD.Titlu_Curs);
    sp_Generare_Catalog(:NEW.ID);
END;
/
CREATE OR REPLACE TRIGGER t_MaterieStearsa
AFTER DELETE ON Cursuri
FOR EACH ROW
BEGIN
    sp_Stergere_Catalog(:OLD.Titlu_Curs);
END;